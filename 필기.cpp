/*
Up+Casting
- 자식 클래스의 객체를 부모 클래스타입으로 변환
- 명시적인 타입 변환이 필요 없음.

Down+Casting



static_cast 
기본타입간 변환
dynamic_cast 
런타임에 수행(다운캐스팅에서 일반적으로 사용) 
const_cast 
객체의 상수성을 제거해줌(포인터나 참조만 가능)
reinterpret_cast 
포인터나 정수형 데이터를 다른포인터로 변경(위험한 녀석)

Updowncasting


*/
#pragma region Template
/*
-아직 정해지지 않은 다양한 데이터형에 대해 함수나 클래스를 정의할 수 있다.
-일반적으로 변수, 함수와 특정 데이터를 사용하는 실체들의 대부분을 선언하기를 원함.
-하지만 데이터 형이 달라지더라도 동일한 코드를 갖는 경우가 만핟.
-정렬 등 기타등등 뭔가 같은 데이터 구조의 동작을 구현한다면 취급하는 데이터형이 달라지더라도 코드는 거의 동일함
-단순무식하게 동일한 동작을 계속해서 구현할 수 있긴 하지만..
ㄴ문제는 같은 동작을 계속해서 구현한다면 결국엔 같은 실수를 반복할 수 있다.
ㄴ또한 복잡하지만 더 나은 알고리즘이 있더라도 많은 실수를 하게 될 수도 있기 때문에 결국엔 피할수도 있다.

그래서 템플릿이라는 도구를 사용하면 문제를 해결할 수 있다.
1. 아직 정해지지 않은 다양한 데이터형에 대해서 함수나 클래스를 정의할 수 있다.
2. 템플릿을 사용하면 묵시적, 명시적 데이터형을 인자로 알린다.
3. 

<함수템플릿>
-함수에 필요한 자료형을 선언하고 함수 호출시 자료형을 지정해서 사용
-템플릿으로 작성한 함수를 호출할때는 자료형에 맞는 함수를 생성함.

<클래스 템플릿>
-다양한 데이터 타입을 지원하는 클래스를 정의할 수 있게 해줌
-템플릿 매개변수를 통해 클래스의 멤버변수와 멤버함수의 타입을 일반화 할 수 있다.
-클래스에 필요한 자료형을 선언하고 클래스 자료형을 지정함.
- 템플릿으로 작성한 클래스를 호출할때는 자료형에 맞는 클래스를 생성함.


*/
#pragma endregion
#pragma region 과제
/*
1.GameScene 이라는 클래스를 생성
ㄴ 여기 Scene에서 전투로직을 구현하세요.
enemy를넣거나 클래스 두개를 싸우게 한다거나..

int main()
{
GameScene
}

콘솔 프로젝트(개인)
-언어숙지를 위한 프로젝트
ㄴ경일도박장(1.카드게임2.슬라이드게임3.빙고게임)이런것 X
ㄴ








*/