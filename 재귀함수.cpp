//펙토리얼
#include<iostream>
/*
Recursive 재귀함수 - 자기자신을 호출하는함수
정의 - 프로그래밍에서의 재귀는 어떤 복잡한 문제를 더단순한 하위문제로 쪼개서 해결하는대 프로그래밍에서의 재귀임
기본조건 - 종료조건이 반드시 있어야함  종료조건이 없으면 내자신을 계속호출하기때문에 무한루프에 빠짐
모든 재귀함수는 적어도 종료조건이 하나 이상은 있어야함

재귀 단계(함수가 자기자신을 호출하는단계)
하노이탑 - 1번에 원반한번옮길수있고 작은원반위에 큰원반이 올수없음
이 조건 하에서 ‘최소의 이동횟수로 옮기는 가짓수’를 구하거나, ‘최소의 이동횟수로 옮길 때 각 원반을 옮기는 순서’ 등을 구하는 것이 하노이의 탑 문제가 된다.


펙토리얼 - 모든정수의 곱

장단점

장점
- 복잡한문제를 하위로 잘개잘개 분할해서 해결할수있음
- 반복문을 쓰지않고 재귀적인 호출을 통해 해결할수있음

단점
- 오버헤드가 발생
- 다소 이해하기 까다로움 복잡하게만들면 디버깅자체가 힘듬

*/


int factorial(int n)
{
    if (n <= 1) return 1; //종료조건

    //재귀단계 : n*(n-1)의 팩토리얼
    return n * factorial(n - 1);  //공식
    //3* factorial(2)
    //factorial(2)  - return 2*1 ;
    //factorial(1)  - return 1;

}
//3* factorial(2)
//3*2*factorial(1)
//3*2*1           <이방향으로
int main()
{
    int res = factorial(3);//3*2*1 = 6
    std::cout << res << std::endl;
}

//ㄴ워드, pdf, 한글로 기능 정의서를 만들어라.
//
//주제 : 000 만들기
//
//- 000기능구현(vector)
//- 000기능구현(vector)
//- 간단히 어떤 기능인지 명시하라는 뜻
//- 스케줄
//- ex) 08.12 ~08.14 전투시스템구현
//- ex) 08.14 ~08.17 ~~구현
//
//내일부터 진행 ~23일(발표)
//
//목적 : 프로그래밍의 전반적인 숙련도 상승
//
//발표는
//
//홍길동 - 점수매길거임 나머지인원이